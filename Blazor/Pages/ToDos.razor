@page "/ToDos"
@using Domain.Models
@inject IToDoHome _toDoHome

<h3>ToDos</h3>
@if (todos == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!todos.Any())
{
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Owner ID</th>
            <th>Todo ID</th>
            <th>Title</th>
            <th>Completed?</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todos)
        {
            <tr>
                <td>@item.OwnerId</td> 
                <td>@item.Id</td> 
                <td>@item.Title</td> 
                <td>
                    <label class="switch">
                        <input type="checkbox" 
                            checked=@item.IsCompleted 
                            @onchange="@((arg) => ToggleStatus((bool)arg.Value, item))">
                        <span class="slider round"></span>
                    </label>
                </td>
                <td>
                    <label 
                    @onclick="@(() => RemoveTodo(item.Id))" 
                    style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">@errorLabel</label>
}


@code {
    private ICollection<Todo> todos;
    private String errorLabel;
    protected  override async Task OnInitializedAsync()
    {
        todos = await _toDoHome.GetAsync();
    }
    private async Task RemoveTodo(int id)
    {
        errorLabel = "";
        try
        {
            Todo todoToRemove = todos.First(todo => todo.Id == id);
            await _toDoHome.DeleteAsync(id);
            todos.Remove(todoToRemove);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
    private async Task ToggleStatus(bool status, Todo todo)
    {
        errorLabel = "";            
        todo.IsCompleted = status;
        try
        {
            await _toDoHome.UpdateAsync(todo);
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }
}